SYNTAX PARSES, EXECUTION CONTEXTS AND LEXICAL ENVIORNMENTS

syntax parser- a program that reads your code and detemrines
what it does and if its grammar is valid
someone else wrote a program to translate it for the computer
so you have your code and then there is a program that converts this into
computer instructions to hardware readable code
syntax parser goes through character by character 

LEXICAL ENVIORNMENT
where something sits physically in the code you write
where you write something is important 
a variable sits lexically inside a function  

EXECUTION CONTEXT
a wrapper to help manage the code that is running
there are lots of lexical environments- the one currently running is managed 
via eecution contexts

Objects are important
name/value pairs
a name value pair is a name which maps to a unique value
the name may be defined more than once, but can only have one
value in any given context
that value may be more name/value pairs

eg Address = '100 Main St';

an object is just a collection of name/value pairs
that value might be another object
eg

Address:
    {
        Street: 'Main',
        Apartment: 
            {
                Floor: 3,
                Number: 301
            }
    }

THE GLOBAL ENVIORNMENT AND THE GLOBAL OBJECT
whenever code run inside js its run inside an execution context
meaning a wrapper that the js engine 
base execution context is the global execution context
global- the thing that is accessible to eveything in your code (its global)

the global execution context creates two things for you:
    1- global object
    2- 'this'


this in the browser points to the window object
this refers to the window object

if running js in node different global object

global: 'not inside a function'  

var a = 'hello world'
// available in global 

//funciton b available in the global object
function b() {

}

a and window.a are the same thing 

//-----------------------------------------------------//
CREATION AND HOISTING

b();
console.log(a)
var a = 'hello world';

function b() {
    console.log('called b')
}

OUTPUT:
called b
undefined

even though the function was below it still ran
this is called hoisting  

execution context is created in two phases
first phase is creation phase
global object setup and 'this' is created
outer environment created
in this creation phase recogniss wher eyou created variables and functions
sets up memory space for variables and functions - 'hoisting'
before code executed line by line js already set aside memeory space 
for the variables and funcitons you have created in the code 

when it comes to variables; function entirely is store din memory space
but when sets up memeory space for vairable a wont know what its value is 
until it  starts executing this code so instead puts a placeholder 
undeifned meaning idk what this value is yet 
all variables initially set to undefined functions set in memory in their entirety

NOTE: with let and const get reference error
let and const are hoisted but difference is they stay uninitialised
(not like var where they get initialised as undeifned)
they will only get initialised when they get evaluated 


JS AND UNDEFINED 
var a;
console.log(a)

// get undefined- this is a special value that js has ini it, means the variable hasnt been set

//-----------------------------------------------------//
EXECUTION CONTEXT

now runs the code you have wirtten line by line 
js is single threaded- one command at a time
when dealing with browsers js isnt the only thing happening in the browser

//-----------------------------------------------------//
EXECUTION STACK
invocation- is js by using ()

function b () {

}

function a () {
    b()
}

a()

first of all a global execution conext is created
then compiler will start up and create variable this, global object (window)
then in creation phase attach these to the window objec
ie it will set up memory space so b and a will be in memory
when hits a() it invokes a 

a new execution context is created and placed on the execution stack
its just a stack- one on top of the other
the one on top is the one currently running 
if have another funciton () then create another execution context 

!!!every function creates a new execution context 

when finishes gets popped off the stack  

//-----------------------------------------------------//
FUNCTIONS CONTEXT AND VARIABLE ENVIRONEMNTS
variable enviornemnt- just talking about where the vairables live
where is the variable?

function b(){
    var myVar
}
function a(){
    var myVar = 2
    b()
}
var myVar = 1
a()

what is value of myVar at any point in time?
first- global execution context created
memory space set up
then code run line by line
first myVar gets evaluated to 1
then hits a()
new exeuciton context is created for a
then the myVar = 2 is put into a's exeuciton context environment

!!!! every execution context has its own variable environemnt


then hits b() and new exeuciton context created - gets pushed onto the stack
inside b var myVar is set to undeifned

SCOPE- where are we able to see the variable?
here each variable defined inside its own execution context 
because its inside a function
each myVar is distinct 

//-----------------------------------------------------//
THE SCOPE CHAIN

function b(){
    console.log(myVar)
}
function a(){
    var myVar = 2
    b()
}
var myVar = 1
a()

what will happen isndie b when executed?
myVar is not defined inside b
you will see 1 in the console- the value that was sitting at the global level

when we request a variable js does more than just look at the variable enviornment
of the currently executing context

remmeebr every execution context gets:
    1- 'this'
    2- the reference to the outer environemnt

every execution context has a reference to its outer environemnt 
what is its outer environemnt?
in the case of function b its outer environemnt is the gloabl execution context 

what outer environemnt? the lexical environemnt - where something is written physically
have to look at where does function b sit lexically 
it sits on top of the gloabl environemnt 

when you ask for a variable in an exeuciton context but cant find that variable
it will look in the outer reference which depends on where the function sits lexically 


scope chain- those links of outer lexical enviornment references
will look down the scope chain 

if put function b inside a then changed b's lexical enviornment is different
b's outer reference is not a
when ask for myVar it goes to a this time instead of global

function a(){
    var myVar = 2
    function b(){
        console.log(myVar)
    }      
    b()
}
var myVar = 1
a()


//-----------------------------------------------------//
ES6 let and const 
let can be used instead of var now 
let is block scoped
can declare a variable- but not allowed to use it until it gets executed


//-----------------------------------------------------//
WHAT ABOUT ASYNCHRONOUS CALLBACKS?

asynchronous - more than one at a time 
think about js engine itself- doesnt usually exist by itself 
there are other negines outside js engine
eg the rendering engine, http request
js has hooks where it can talk to these other engines 

exeuction contexts created when functions called
another list sits isndie js engine called the event que
filled with notifications of events

eg a click event gets placed on the que  

the event que only gets looked at when the eecution stack is empty
so it only gets processed when the exeucion stack is empty

const printHello = () => {
  console.log('hello')
}
setTimeout(printHello, 0);
console.log('me first')

// so creates a timer in web browser api- they are not part of javascript - pass the 0 and also the reference to the printHello function 
// has a column complete or not
// its been set up now so we continue with execution thread

// get the console log logging me first 
// in the background our timer compeltes in the background
// event loop checks if the call stack is emppty- when so 
it pshes call to printhello function to call stack and it executes

// long running function
function waitThreeSeconds() {
    var ms = 3000 + new Date().getTime();
    while (new Date() < ms){}
    console.log('finished function');
}

function clickHandler() {
    console.log('click event!');   
}

// listen for the click event
document.addEventListener('click', clickHandler);


waitThreeSeconds();
console.log('finished execution');